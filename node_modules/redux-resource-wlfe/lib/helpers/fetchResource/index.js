'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = fetchResource;

var _pinkiePromise = require('pinkie-promise');

var _pinkiePromise2 = _interopRequireDefault(_pinkiePromise);

var _tryResult = require('../tryResult');

var _tryResult2 = _interopRequireDefault(_tryResult);

var _assign = require('../assign');

var _assign2 = _interopRequireDefault(_assign);

var _setHeaders = require('./setHeaders');

var _setHeaders2 = _interopRequireDefault(_setHeaders);

var _normalizeHeaders = require('./normalizeHeaders');

var _normalizeHeaders2 = _interopRequireDefault(_normalizeHeaders);

var _serializeDataForContentType = require('./serializeDataForContentType');

var _serializeDataForContentType2 = _interopRequireDefault(_serializeDataForContentType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_HEADERS = {
  'content-type': 'application/json'
};

var DEFAULT_OPTIONS = {
  method: 'GET'
};

function fetchResource(url) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  return new _pinkiePromise2.default(function (resolve, reject) {
    options = (0, _assign2.default)({}, DEFAULT_OPTIONS, options);

    options.headers = (0, _assign2.default)({}, DEFAULT_HEADERS, (0, _normalizeHeaders2.default)(options.headers));

    var data = (0, _serializeDataForContentType2.default)(options.data, options.headers['content-type']);

    var xhr = new XMLHttpRequest();

    xhr.open(options.method, url);

    (0, _setHeaders2.default)(xhr, options.headers);

    xhr.onload = function () {
      if (xhr.status != 200) {
        reject((0, _tryResult2.default)(function () {
          return JSON.parse(xhr.responseText);
        }, function () {
          return xhr.responseText;
        }));
      } else {
        resolve(JSON.parse(xhr.responseText));
      }
    };

    xhr.send(data);
  });
}